<?xml version="1.0" encoding="utf-8"?>
<resources>


    <declare-styleable name="AppBar">
        <attr name="left_drawable_background" format="reference" />
        <attr name="left_drawable" format="reference" />
        <attr name="right_drawable" format="reference" />
        <attr name="right_text" format="string" />
        <attr name="right_text_color" format="color" />
        <attr name="left_text" format="string" />
        <attr name="left_text_color" format="color" />
        <attr name="title_text" format="string" />
        <attr name="title_text_color" format="color" />
        <attr name="title_gravity"><!-- Push object to the top of its container, not changing its size. -->
            <flag name="top" value="0x30" />
            <!-- Push object to the bottom of its container, not changing its size. -->
            <flag name="bottom" value="0x50" />
            <!-- Push object to the left of its container, not changing its size. -->
            <flag name="left" value="0x03" />
            <!-- Push object to the right of its container, not changing its size. -->
            <flag name="right" value="0x05" />
            <!-- Place object in the vertical center of its container, not changing its size. -->
            <flag name="center_vertical" value="0x10" />
            <!-- Grow the vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill_vertical" value="0x70" />
            <!-- Place object in the horizontal center of its container, not changing its size. -->
            <flag name="center_horizontal" value="0x01" />
            <!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
            <flag name="fill_horizontal" value="0x07" />
            <!-- Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. -->
            <flag name="center" value="0x11" />
            <!-- Grow the horizontal and vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill" value="0x77" />
            <!-- Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. -->
            <flag name="clip_vertical" value="0x80" />
            <!-- Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. -->
            <flag name="clip_horizontal" value="0x08" />
            <!-- Push object to the beginning of its container, not changing its size. -->
            <flag name="start" value="0x00800003" />
            <!-- Push object to the end of its container, not changing its size. -->
            <flag name="end" value="0x00800005" />
        </attr>
        <attr name="right_visibility">
            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0x00000000" />
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="0x00000004" />
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="0x00000008" />
        </attr>
        <attr name="left_visibility">
            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0x00000000" />
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="0x00000004" />
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="0x00000008" />
        </attr>
        <attr name="left_text_visibility">
            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0x00000000" />
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="0x00000004" />
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="0x00000008" />
        </attr>
        <attr name="left_image_visibility">
            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0x00000000" />
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="0x00000004" />
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="0x00000008" />
        </attr>
        <attr name="right_text_visibility">
            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0x00000000" />
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="0x00000004" />
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="0x00000008" />
        </attr>
        <attr name="right_image_visibility">
            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0x00000000" />
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="0x00000004" />
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="0x00000008" />
        </attr>
    </declare-styleable>


    <declare-styleable name="ComplexEditText">


        <attr name="titleMinWidth" format="dimension" />
        <attr name="titleTextColor" />
        <attr name="titleText" format="string" />
        <attr name="titleTextSize" format="dimension" />
        <attr name="editTextSize" format="dimension" />
        <attr name="editTextColor" />
        <attr name="editHint" format="string" />
        <attr name="editText" format="string" />
        <attr name="editHintColor" format="color" />
        <attr name="android:inputType" />
        <attr name="android:minEms" />
        <attr name="android:digits" />
        <attr name="rightDrawable" format="reference" />
        <attr name="rightDrawableVisibility">
            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0x00000000" />
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="0x00000004" />
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="0x00000008" />
        </attr>
    </declare-styleable>
    <declare-styleable name="ComplexTextView">
        <attr name="titleTextColor" />
        <attr name="titleText" />
        <attr name="titleTextSize" />
        <attr name="contentTextSize" format="dimension" />
        <attr name="contentTextColor" format="color" />
        <attr name="contentHint" format="string" />
        <attr name="contentText" format="string" />
        <attr name="contentGravity">
            <flag name="top" value="0x30" />
            <!-- Push object to the bottom of its container, not changing its size. -->
            <flag name="bottom" value="0x50" />
            <!-- Push object to the left of its container, not changing its size. -->
            <flag name="left" value="0x03" />
            <!-- Push object to the right of its container, not changing its size. -->
            <flag name="right" value="0x05" />
            <!-- Place object in the vertical center of its container, not changing its size. -->
            <flag name="center_vertical" value="0x10" />
            <!-- Grow the vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill_vertical" value="0x70" />
            <!-- Place object in the horizontal center of its container, not changing its size. -->
            <flag name="center_horizontal" value="0x01" />
            <!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
            <flag name="fill_horizontal" value="0x07" />
            <!-- Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. -->
            <flag name="center" value="0x11" />
            <!-- Grow the horizontal and vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill" value="0x77" />
            <!-- Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. -->
            <flag name="clip_vertical" value="0x80" />
            <!-- Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. -->
            <flag name="clip_horizontal" value="0x08" />
            <!-- Push object to the beginning of its container, not changing its size. -->
            <flag name="start" value="0x00800003" />
            <!-- Push object to the end of its container, not changing its size. -->
            <flag name="end" value="0x00800005" />
        </attr>
        <attr name="contentHintColor" format="color" />
        <attr name="android:minEms" />
        <attr name="rightDrawable" />
        <attr name="rightDrawableVisibility" />

    </declare-styleable>


    <declare-styleable name="AdapterView">
        <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
        <attr name="itemView" />
        <!-- require List<ViewModel> bind to ItemView to presentation.-->
        <attr name="items" />
        <!-- require a adapter which type of BindingRecyclerViewAdapter<T> to AdapterView-->
        <attr name="adapter" />
        <attr name="dropDownItemView" format="reference" />
        <attr name="itemIds" format="reference" />
        <attr name="itemIsEnabled" format="reference" />
        <!-- require BindingCommand<Integer> -->
        <!--        <attr name="onScrollStateChangedCommand" />-->
        <!-- require BindingCommand<ListViewScrollDataWrapper> -->
        <!--        <attr name="onScrollChangeCommand" />-->
        <!-- require BindingCommand<Integer> count of list items-->
        <attr name="onLoadMoreCommand" format="reference" />
    </declare-styleable>


    <declare-styleable name="RecyclerView" parent="AdapterView">
        <attr name="lineManager" format="reference" />
        <attr name="itemBinding" format="reference" />
        <attr name="layoutManager" format="reference" />
        <attr name="itemAnimator" format="reference" />
    </declare-styleable>

    <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
    <attr name="itemView" format="reference" />
    <!-- require List<ViewModel> bind to ItemView to presentation.-->
    <attr name="items" format="reference" />
    <!-- require a adapter which type of BindingRecyclerViewAdapter<T> to AdapterView-->
    <attr name="adapter" format="reference" />

</resources>